@using Domain
@using Microsoft.Web.Mvc;
@using Web.Areas.AnalysisManagement;
@using Web.Areas.LocationManagement;

@section page_title{
Analysis: Health Facility Report
}

@{
    Html.RenderPartial("_EmptySubNavigation");
    Html.RenderPartial("_AnalysisSideBar");
}



<script type="text/javascript">

    Ext.onReady(function () {

        var analysisBtnId = window.res.header.navigation.analysisAndReports;
        var analysisBtn = Ext.getCmp(analysisBtnId);
        analysisBtn.toggle(true);

        var reportBtnId = window.res.content.maincontent.sidebar.healthfacility;
        var reportBtn = Ext.getCmp(reportBtnId);
        reportBtn.toggle(true);
    });

</script>
<script type="text/javascript">
    var allowUserToClearValue = {
        'load': function () {
            //this.insert(0, {Id:'@Guid.Empty', Name:'All'});
        }
    };
    Ext.onReady(function () {
        window.feature = {};
        window.feature.countryComboboxId = 'Overview-Combobox-Country-Health-Facility-Level';
        window.feature.regionComboboxId = 'Overview-Combobox-Region-Health-Facility-Level';
        window.feature.districtComboboxId = 'Overview-Combobox-District-Health-Facility-Level';
        window.feature.outpostTypeComboboxId = 'Overview-Combobox-Outpost-Type-Health-Facility-Level';
        window.feature.StartDateId = 'Start-Date-Health-Facility-Level';
        window.feature.EndDateId = 'End-Date-Health-Facility-Level';
        window.feature.modalCountryComboboxId = 'Overview-Window-Combobox-Country-Health-Facility-Level';
        window.feature.modalRegionComboboxId = 'Overview-Window-Combobox-Region-Health-Facility-Level';
        window.feature.modalDistrictComboboxId = 'Overview-Window-Combobox-District-Health-Facility-Level';
        window.feature.modalOutpostTypeComboboxId = 'Overview-Window-Combobox-Outpost-Type-Health-Facility-Level';
        window.feature.modalStartDateId = 'Window-Start-Date-Health-Facility-Level';
        window.feature.modalEndDateId = 'Window-End-Date-Health-Facility-Level';
        window.feature.gridHealthFacilityLevelId = "Grid-Health-Facility-Level-Id";
        DivChartContainer = "Chart-Health-Facility-Level-Id";
        window.feature.exportStartDate = "";
        window.feature.exportEndDate = "";

        var myMask = '';
        window.feature.reportStore = Ext.create('Ext.data.Store', {
            fields: ['OutpostName', 'NumberOfPatients', 'Male', 'Female'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "HealthFacilityReport", action = "GetHealthFacilityReport" })',
                reader: {
                    type: 'json',
                    root: 'Outposts',
                    totalProperty: 'TotalItems'
                },
                extraParams: {
                    countryId: '',
                    regionId: '',
                    districtId: '',
                    startDate: '',
                    endDate: '',
                    outpostType: ''
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'OutpostName',
                direction: 'ASC'
            }],
            listeners: {
                'load': function (store, records, options) {
                    DrawChart();
                    myMask.hide();
                },
                'beforeload': function(store, operation, options){
                    var cont = Ext.getCmp('DivChartContainer');
                    myMask = new Ext.LoadMask(cont, { msg: 'Please wait...' });
                    myMask.show();
                }
            }
        });

        window.feature.countryStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.LocationManagement.LocationManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Region", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'Countries',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.regionStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.LocationManagement.LocationManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "District", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.districtStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.LocationManagement.LocationManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Outpost", action = "GetDistricts" })',
                reader: {
                    type: 'json',
                    root: 'Districts',
                    totalProperty: 'TotalItems'
                },
                extraParams: { regionId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.outpostTypeStore = Ext.create('Ext.data.Store', {
            fields: ['Id', 'Name', 'Type'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(LocationManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Outpost", action = "GetOutpostTypes" })',
                reader: {
                    type: 'json',
                    root: 'OutpostTypes'
                },
                simpleSortMode: true
            },
            listeners: allowUserToClearValue
        });

        function ResetCountryOverviewDependencies() {
            var regionCombobox = window.feature.container.down('#' + window.feature.regionComboboxId);
            regionCombobox.setValue(null);

            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue(null);

            window.feature.reportStore.proxy.extraParams.regionId = "";
            window.feature.reportStore.proxy.extraParams.districtId = "";
        };

        function ResetRegionOverviewDependencies() {
            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue(null);

            window.feature.reportStore.proxy.extraParams.districtId = "";
        };

        window.feature.country = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.countryComboboxId,
            store: window.feature.countryStore,
            width: 170,
            labelAlign: 'top',
            fieldLabel: 'Selected Country',
            displayField: 'Name',
            valueField: 'Id',
            labelClsExtra: 'combo-label',
            emptyText: 'Country List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    ResetCountryOverviewDependencies();

                    window.feature.regionStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.regionStore.load();

                    window.feature.reportStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.reportStore.load();
                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        ResetCountryOverviewDependencies();
                        window.feature.reportStore.proxy.extraParams.countryId = '';
                        window.feature.reportStore.load();
                    }
                }
            }
        });
        window.feature.region = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.regionComboboxId,
            store: window.feature.regionStore,
            width: 170,
            labelAlign: 'top',
            fieldLabel: 'Selected Region',
            displayField: 'Name',
            valueField: 'Id',
            labelClsExtra: 'combo-label',
            emptyText: 'Region List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    ResetRegionOverviewDependencies();

                    window.feature.districtStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.districtStore.load();

                    window.feature.reportStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.reportStore.load();
                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        ResetRegionOverviewDependencies();
                        window.feature.reportStore.proxy.extraParams.regionId = '';
                        window.feature.reportStore.load();
                    }
                }
            }
        });

        window.feature.district = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.districtComboboxId,
            store: window.feature.districtStore,
            width: 170,
            labelAlign: 'top',
            fieldLabel: 'Selected District',
            displayField: 'Name',
            labelClsExtra: 'combo-label',
            valueField: 'Id',
            emptyText: 'District List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    window.feature.reportStore.proxy.extraParams.districtId = combo.getValue();
                    window.feature.reportStore.load();
                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        window.feature.reportStore.proxy.extraParams.districtId = '';
                        window.feature.reportStore.load();
                    }
                }
            }
        });

        window.feature.outpostType = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.outpostTypeComboboxId,
            store: window.feature.outpostTypeStore,
            width: 170,
            queryMode: 'local',
            displayField: 'Name',
            labelAlign: 'top',
            fieldLabel: 'Selected Health Facility',
            labelClsExtra: 'combo-label',
            initialValue: 0,
            valueField: 'Type',
            emptyText: 'Type List',
            typeAhead: true,
            listeners: {
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                    }
                },
                'select': function (combo, record) {
                    window.feature.reportStore.proxy.extraParams.outpostType = combo.getValue();
                    window.feature.reportStore.load();
                }
            }
        });


        Ext.define('Ext.chart.theme.MyTheme', {
            extend: 'Ext.chart.theme.Base',
            colors: ['rgb(255, 	130, 	171)', 'rgb(126, 	192, 	238)'],
            constructor: function (config) {
                this.callParent([Ext.apply({
                    colors: this.colors
                }, config)]);
            }
        });

        var chartStore = Ext.create('Ext.data.ArrayStore', {
            fields: [
                { name: 'outpostName' },
                { name: 'Female', type: 'int' },
                { name: 'Male', type: 'int' }
            ]
        });

        function GenerateData() {
            dataStore = [];
            var rowNo = window.feature.reportStore.count();
            var i = 0;
            var row = [];
            while (i < rowNo) {
                row = [];
                row.push(window.feature.reportStore.getAt(i).get('OutpostName'));
                row.push(parseInt(window.feature.reportStore.getAt(i).get('Female')));
                row.push(parseInt(window.feature.reportStore.getAt(i).get('Male')));
                dataStore.push(row);
                i++;
            }
            return dataStore;
        };

        function DrawChart() {
            var cont = Ext.getCmp('DivChartContainer');
            var chart = Ext.getCmp('chartIdRemove');
            cont.remove(chart);

            var myData = GenerateData();
            chartStore.loadData(myData);

            cont.add({
                id: 'chartIdRemove',
                xtype: 'chart',
                animate: true,
                shadow: true,
                style: 'background:#fff',
                minHeight: 600,
                minWidth: 1070,
                margin: '5 5 5 5',
                store: chartStore,
                theme: 'MyTheme',
                axes: [{
                    type: 'Category',
                    position: 'bottom',
                    fields: ['outpostName'],
                    title: 'Health Facility',
                    label: {
                        orientation: 'horizontal',
                        rotate: {
                            degrees: 60
                        }
                    }
                }, {
                    type: 'Numeric',
                    position: 'left',
                    fields: ['Female', 'Male'],
                    title: 'Number of patients',
                    grid: true,
                    minimum: 0,
                    maximum:GetTheBiggestValue(),
                    majorTickSteps: GetTheBiggestValue() -1

                }],
                series: [{
                    type: 'column',
                    axis: 'bottom',
                    highlight: true,
                    tips: {
                        trackMouse: true,
                        width: 140,
                        renderer: function (storeItem, item) {
                            this.setTitle(String(item.value[1]) + ' Patients - ' + item.value[0]);
                        }
                    },
                    xField: 'outpostName',
                    yField: ['Female', 'Male'],
                    stacked: true
                }],
                legend: {
                    position: 'right'
                },
                listeners: {
                }
            });
        };

        window.feature.modal = Ext.define('Ext.feature.HealthFacilityReport.Modal', {
            extend: 'Ext.window.Window',
            modal: true,
            ui: 'snapshot-popup-window',
            title: 'Health Facility Report',
            height: 700,
            width: 1055,
            layout: {
                align: 'stretch',
                padding: 10,
                type: 'vbox'
            },

            initComponent: function () {
                var me = this;
                var countryOverviewCombobox = window.feature.container.down('#' + window.feature.countryComboboxId);
                var regionOverviewCombobox = window.feature.container.down('#' + window.feature.regionComboboxId);
                var districtOverviewCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
                var startDateOverviewCombobox = window.feature.container.down('#' + window.feature.StartDateId);
                var endDateOverviewCombobox = window.feature.container.down('#' + window.feature.EndDateId);
                var outpostTypeOverviewCombobox = window.feature.container.down('#' + window.feature.outpostTypeComboboxId);

                Ext.applyIf(me, {
                    items: [{
                        xtype: 'container',
                        height: 65,
                        layout: 'fit',
                        items: [{
                            xtype: 'container',
                            height: 65,
                            autoScroll: true,
                            scrollable:true,
                            layout: {
                                align: 'stretch',
                                type: 'hbox'
                            },
                            padding: '0 0 0 7',
                            items: [{
                                xtype: 'combobox',
                                itemId: window.feature.modalCountryComboboxId,
                                store: window.feature.countryStore,
                                width: 170,
                                labelAlign: 'top',
                                fieldLabel: 'Selected Country',
                                displayField: 'Name',
                                valueField: 'Id',
                                labelClsExtra: 'combo-label',
                                emptyText: 'Country List',
                                value: countryOverviewCombobox.getValue(),
                                editable: false,
                                typeAhead: false,
                                listeners: {
                                    'select': function (combo, record) {
                                        ResetCountryOverviewDependencies();
                                        countryOverviewCombobox.setValue(combo.getValue());
                                        me.down('#' + window.feature.modalRegionComboboxId).setValue(null);
                                        me.down('#' + window.feature.modalDistrictComboboxId).setValue(null);

                                        window.feature.regionStore.proxy.extraParams.countryId = combo.getValue();
                                        window.feature.regionStore.load();

                                        window.feature.reportStore.proxy.extraParams.countryId = combo.getValue();
                                        window.feature.reportStore.load();
                                    },
                                    specialkey: function (field, e) {
                                        if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                            field.setValue(null);
                                            countryOverviewCombobox.setValue(null)
                                            ResetCountryOverviewDependencies();
                                            me.down('#' + window.feature.modalRegionComboboxId).setValue(null);
                                            me.down('#' + window.feature.modalDistrictComboboxId).setValue(null);
                                            window.feature.reportStore.load();
                                        }
                                    }
                                }
                            }, {
                                xtype: 'combobox',
                                itemId: window.feature.modalRegionComboboxId,
                                store: window.feature.regionStore,
                                width: 170,
                                labelAlign: 'top',
                                fieldLabel: 'Selected Region',
                                displayField: 'Name',
                                valueField: 'Id',
                                labelClsExtra: 'combo-label',
                                emptyText: 'Region List',
                                value: regionOverviewCombobox.getValue(),
                                editable: false,
                                typeAhead: false,
                                listeners: {
                                    'select': function (combo, record) {
                                        ResetRegionOverviewDependencies();
                                        regionOverviewCombobox.setValue(combo.getValue());
                                        me.down('#' + window.feature.modalDistrictComboboxId).setValue(null);

                                        window.feature.districtStore.proxy.extraParams.regionId = combo.getValue();
                                        window.feature.districtStore.load();

                                        window.feature.reportStore.proxy.extraParams.regionId = combo.getValue();
                                        window.feature.reportStore.load();
                                    },
                                    specialkey: function (field, e) {
                                        if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                            field.setValue(null);
                                            ResetRegionOverviewDependencies();
                                            regionOverviewCombobox.setValue(null);
                                            me.down('#' + window.feature.modalDistrictComboboxId).setValue(null);
                                            window.feature.reportStore.load();
                                        }
                                    }
                                }
                            }, {
                                xtype: 'combobox',
                                itemId: window.feature.modalDistrictComboboxId,
                                store: window.feature.districtStore,
                                width: 170,
                                labelAlign: 'top',
                                fieldLabel: 'Selected District',
                                displayField: 'Name',
                                labelClsExtra: 'combo-label',
                                valueField: 'Id',
                                emptyText: 'District List',
                                value: districtOverviewCombobox.getValue(),
                                editable: false,
                                typeAhead: false,
                                listeners: {
                                    'select': function (combo, record) {
                                        districtOverviewCombobox.setValue(combo.getValue());

                                        window.feature.reportStore.proxy.extraParams.districtId = combo.getValue();
                                        window.feature.reportStore.load();
                                    },
                                    specialkey: function (field, e) {
                                        if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                            field.setValue(null);
                                            districtOverviewCombobox.setValue(null);
                                            window.feature.reportStore.proxy.extraParams.districtId = "";
                                            window.feature.reportStore.load();
                                        }
                                    }
                                }
                            }, {
                                xtype: 'datefield',
                                fieldLabel: 'Start Date',
                                width: 170,
                                format: 'd-M-Y',
                                labelAlign: 'top',
                                itemId: window.feature.modalStartDateId,
                                value: startDateOverviewCombobox.getValue(),
                                listeners: {
                                    select: function (t, n, o) {
                                        var date = t.getValue();
                                        window.feature.exportStartDate = date;
                                        startDateOverviewCombobox.setValue(date);
                                        window.feature.reportStore.proxy.extraParams.startDate = date;
                                        window.feature.reportStore.load();
                                    },
                                    specialkey: function (field, e) {
                                        if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                            field.setValue(null);
                                            startDateOverviewCombobox.setValue(null);
                                            window.feature.reportStore.proxy.extraParams.startDate = "";
                                            window.feature.exportStartDate = "";
                                            window.feature.reportStore.load();
                                        }
                                    }
                                }
                            }, {
                                xtype: 'datefield',
                                fieldLabel: 'End Date',
                                width: 170,
                                labelAlign: 'top',
                                format: 'd-M-Y',
                                itemId: window.feature.modalEndDateId,
                                value: endDateOverviewCombobox.getValue(),
                                listeners: {
                                    select: function (t, n, o) {
                                        var date = t.getValue();
                                        window.feature.exportEndDate = date;
                                        endDateOverviewCombobox.setValue(date);
                                        window.feature.reportStore.proxy.extraParams.endDate = date;
                                        window.feature.reportStore.load();
                                    },
                                    specialkey: function (field, e) {
                                        if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                            field.setValue(null);
                                            endDateOverviewCombobox.setValue(null);
                                            window.feature.reportStore.proxy.extraParams.endDate = "";
                                            window.feature.exportEndDate = "";
                                            window.feature.reportStore.load();
                                        }
                                    }
                                }
                            }, {
                                xtype: 'combobox',
                                itemId: window.feature.modalOutpostTypeComboboxId,
                                store: window.feature.outpostTypeStore,
                                width: 170,
                                queryMode: 'local',
                                displayField: 'Name',
                                labelAlign: 'top',
                                fieldLabel: 'Selected Health Facility',
                                labelClsExtra: 'combo-label',
                                initialValue: 0,
                                valueField: 'Type',
                                emptyText: 'Type List',
                                value: outpostTypeOverviewCombobox.getValue(),
                                typeAhead: true,
                                listeners: {
                                    specialkey: function (field, e) {
                                        if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                            field.setValue(null);
                                            outpostTypeOverviewCombobox.setValue(null);
                                        }
                                    },
                                    'select': function (combo, record) {
                                        outpostTypeOverviewCombobox.setValue(combo.getValue());

                                        window.feature.reportStore.proxy.extraParams.outpostType = combo.getValue();
                                        window.feature.reportStore.load();
                                    }
                                }
                            }]
                        }]
                    },{
                        xtype: 'gridpanel',
                        cls: 'white-border',
                        itemId: window.feature.gridHealthFacilityLevelId,
                        store: window.feature.reportStore,
                        loadMask: true,
                        disableSelection: true,
                        flex: 3,
                        layout: 'fit',
                        autoScroll: true,
                        columns: [{
                            header: "Health Facility Name",
                            dataIndex: 'OutpostName',
                            flex: 2,
                            minWidth: 200,
                            menuDisabled: true,
                            sortable: true
                        }, {
                            header: "Females",
                            dataIndex: 'Female',
                            flex: 1,
                            minWidth: 70,
                            align: 'center',
                            menuDisabled: true,
                            sortable: true
                        }, {
                            header: "Males",
                            dataIndex: 'Male',
                            flex: 1,
                            minWidth: 70,
                            align: 'center',
                            menuDisabled: true,
                            sortable: true
                        }, {
                            header: "Number Of Patients",
                            dataIndex: 'NumberOfPatients',
                            flex: 1,
                            minWidth: 80,
                            align: 'center',
                            menuDisabled: true,
                            sortable: true
                        }],
                        bbar: [{
                            xtype: 'button',
                            text: 'Export to Excel',
                            handler: function () {
                                DownloadFile();
                            }
                        }]
                    }]
                });

                me.callParent(arguments);
            }
        });

        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 15 15 15',
            padding: '20 0 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                xtype: 'container',
                height: 40,
                layout: {
                    align: 'stretch',
                    type: 'hbox'
                },
                items: [{
                    xtype: 'container',
                    height: 40,
                    flex: 1,
                    layout: {
                        type: 'column'
                    },
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html: '&nbsp;'
                    }, {
                        xtype: 'label',
                        cls: 'x-title-label',
                        text: 'Health Facility Report'
                    }]
                }, {
                    xtype: 'container',
                    height: 40,
                    layout: {
                        type: 'hbox',
                        pack: 'end'
                    },
                    items: [{
                        xtype: 'button',
                        margin: '0 10 0 20',
                        ui: 'snapshot-add-btn',
                        cls: 'x-add-button-gradient',
                        text: 'View Data Table',
                        handler: function () {
                            var winTabel = new window.feature.modal({
                                height: $(window).height()*80/100,
                                width: $(window).width()*80/100,
                            });
                            winTabel.show();
                        }
                    }]
                }]
            }, {
                xtype: 'container',
                height: 65,
                layout: 'fit',
                items: [{
                    xtype: 'container',
                    height: 65,
                    autoScroll: true,
                    scrollable:true,
                    layout: {
                        align: 'stretch',
                        type: 'hbox'
                    },
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html: '&nbsp;'
                    },
                        window.feature.country,
                        window.feature.region,
                        window.feature.district,
                    {
                        xtype: 'datefield',
                        fieldLabel: 'Start Date',
                        width: 170,
                        format: 'd-M-Y',
                        labelAlign: 'top',
                        itemId: window.feature.StartDateId,
                        listeners: {
                            select: function (t, n, o) {
                                var date = t.getValue();
                                window.feature.exportStartDate = date;
                                window.feature.reportStore.proxy.extraParams.startDate = date;
                                window.feature.reportStore.load();
                            },
                            specialkey: function (field, e) {
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue(null);
                                    window.feature.reportStore.proxy.extraParams.startDate = "";
                                    window.feature.exportStartDate = "";
                                    window.feature.reportStore.load();
                                }
                            }
                        }
                    }, {
                        xtype: 'datefield',
                        fieldLabel: 'End Date',
                        labelAlign: 'top',
                        width: 170,
                        format: 'd-M-Y',
                        itemId: window.feature.EndDateId,
                        listeners: {
                            select: function (t, n, o) {
                                var date = t.getValue();
                                window.feature.exportEndDate = date;
                                window.feature.reportStore.proxy.extraParams.endDate = date;
                                window.feature.reportStore.load();
                            },
                            specialkey: function (field, e) {
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue(null);
                                    window.feature.reportStore.proxy.extraParams.endDate = "";
                                    window.feature.exportEndDate = "";
                                    window.feature.reportStore.load();
                                }
                            }
                        }
                    },
                        window.feature.outpostType
                    ]
                }]
            }, {
                flex: 1,
                layout: 'fit',
                padding: '3 10 0 0',
                items: [{
                    xtype: 'container',
                    id: 'DivChartContainer',
                    layout: 'fit',
                    scrollable:true,
                    autoScroll: true,
                    items: []
                }]
            }, {
                xtype: 'container',
                height: 10
            }]
        });

        function DownloadFile() {
            var body = Ext.getBody();

            var frame = body.createChild({
                tag: 'iframe',
                cls: 'x-hidden',
                id: 'iframe',
                name: 'iframe'
            });

            var form = body.createChild({
                tag: 'form',
                cls: 'x-hidden',
                id: 'form',
                method: 'POST',
                action: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "HealthFacilityReport", action = "ExportToExcel" })',
                target: 'iframe'
            });

            var countryInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'countryId',
                value: window.feature.reportStore.proxy.extraParams.countryId
            });

            var regionInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'regionId',
                value: window.feature.reportStore.proxy.extraParams.regionId
            });

            var districtInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'districtId',
                value: window.feature.reportStore.proxy.extraParams.districtId
            });
            var startDateValue = "";
            if (window.feature.exportStartDate != "")
                startDateValue = Ext.Date.format(window.feature.exportStartDate, 'd-M-Y')

            var startDateInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'startDate',
                value: startDateValue
            });

            var endDateValue = "";
            if (window.feature.exportEndDate != "")
                endDateValue = Ext.Date.format(window.feature.exportEndDate, 'd-M-Y')

            var endDateInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'endDate',
                value: endDateValue
            });

            var outpostTypeInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'outpostType',
                value: window.feature.reportStore.proxy.extraParams.outpostType
            });

            form.dom.submit();
        }

        function GetTheBiggestValue() {
            var maxSum = 0;
            chartStore.each(function (record) {
                var sum = record.get('Male') + record.get('Female');
                if (sum > maxSum)
                    maxSum = sum;
            });

            if (maxSum == 1)
                maxSum = 2;

            return maxSum;
        }

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);
        window.feature.outpostTypeStore.load(function () {
            var combo = window.feature.container.down('#' + window.feature.outpostTypeComboboxId);
            combo.setValue(window.feature.outpostTypeStore.getAt(0).get('Type'));
            if ('@Model.TypeId' != '@null') {
                combo.setValue(window.feature.outpostTypeStore.getAt('@Model.TypeId').get('Type'));
            }

            window.feature.reportStore.proxy.extraParams.outpostType = combo.getValue();

            if ('@Model.CountryId' != '@Guid.Empty') {
                window.feature.countryStore.load();
                window.feature.container.down('#' + window.feature.countryComboboxId).setValue('@Model.CountryId');

                window.feature.regionStore.proxy.extraParams.countryId = '@Model.CountryId';
                window.feature.regionStore.load();

                window.feature.reportStore.proxy.extraParams.countryId = '@Model.CountryId';

                if ('@Model.RegionId' != '@Guid.Empty') {
                    window.feature.container.down('#' + window.feature.regionComboboxId).setValue('@Model.RegionId');

                    window.feature.districtStore.proxy.extraParams.regionId = '@Model.RegionId';
                    window.feature.districtStore.load();

                    window.feature.reportStore.proxy.extraParams.regionId = '@Model.RegionId';

                    if ('@Model.DistrictId' != '@Guid.Empty') {
                        window.feature.container.down('#' + window.feature.districtComboboxId).setValue('@Model.DistrictId');
                        window.feature.reportStore.proxy.extraParams.districtId = '@Model.DistrictId';
                    }
                }
            }
            window.feature.reportStore.load();
        });

    });
</script>