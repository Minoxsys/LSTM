@using Domain
@using Microsoft.Web.Mvc;
@using Web.Areas.AnalysisManagement;
@using Web.Areas.LocationManagement;

@section page_title{
Analysis: Product level information at district level
}

@{
    Html.RenderPartial("_EmptySubNavigation");
    Html.RenderPartial("_AnalysisSideBar");
}

<script type="text/javascript">

    Ext.onReady(function () {

        var analysisBtnId = window.res.header.navigation.analysisAndReports;
        var analysisBtn = Ext.getCmp(analysisBtnId);
        analysisBtn.toggle(true);

        var reportBtnId = window.res.content.maincontent.sidebar.summaryreport;
        var reportBtn = Ext.getCmp(reportBtnId);
        reportBtn.toggle(true);
    });

</script>
<script type="text/javascript">
    var allowUserToClearValue = {
        'load': function () {
            //this.insert(0, {Id:'@Guid.Empty', Name:'All'});
        }
    };
    Ext.onReady(function () {
        window.feature = {};
        window.feature.countryComboboxId = 'Overview-Combobox-Country-Summary-Report';
        window.feature.regionComboboxId = 'Overview-Combobox-Region-Summary-Report';
        window.feature.districtComboboxId = 'Overview-Combobox-District-Summary-Report';
        window.feature.outpostTypeComboboxId = 'Overview-Combobox-Outpost-Type-Summary-Report';
        window.feature.StartDateId = 'Start-Date-Summary-Report';
        window.feature.EndDateId = 'End-Date-Summary-Report';
        window.feature.gridHealthFacilityLevelId = "Grid-Summary-Report-Id";
        DivChartContainer = "Chart-Summary-Report-Id";
        window.feature.exportStartDate = "";
        window.feature.exportEndDate = "";

        window.feature.reportStore = Ext.create('Ext.data.Store', {
            fields: ['Outpost', 'Treated', 'NotTreated', 'FailedToReport', 'DistinctPatients'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "SummaryReport", action = "GetSummaryReport" })',
                reader: {
                    type: 'json',
                    root: 'Patients',
                    totalProperty: 'TotalItems'
                },
                extraParams: {
                    countryId: '',
                    regionId: '',
                    districtId: '',
                    startDate: '',
                    endDate: ''
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Outpost',
                direction: 'ASC'
            }],
            listeners: {
                'load': function (store, records, options) {
                    DrawChart();
                }
            }
        });

        window.feature.countryStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.LocationManagement.LocationManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Region", action = "GetCountries" })',
                reader: {
                    type: 'json',
                    root: 'Countries',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.regionStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.LocationManagement.LocationManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "District", action = "GetRegions" })',
                reader: {
                    type: 'json',
                    root: 'regions',
                    totalProperty: 'TotalItems'
                },
                extraParams: { countryId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.districtStore = Ext.create('Ext.data.Store', {
            remoteSort: true,
            fields: ['Id', 'Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Areas.LocationManagement.LocationManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Outpost", action = "GetDistricts" })',
                reader: {
                    type: 'json',
                    root: 'Districts',
                    totalProperty: 'TotalItems'
                },
                extraParams: { regionId: '' },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        function ResetCountryDependencies() {
            var regionCombobox = window.feature.container.down('#' + window.feature.regionComboboxId);
            regionCombobox.setValue(null);

            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue(null);

            window.feature.reportStore.proxy.extraParams.regionId = "";
            window.feature.reportStore.proxy.extraParams.districtId = "";

        };

        function ResetRegionDependencies() {
            var districtCombobox = window.feature.container.down('#' + window.feature.districtComboboxId);
            districtCombobox.setValue(null);

            window.feature.reportStore.proxy.extraParams.districtId = "";
        };

        window.feature.country = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.countryComboboxId,
            store: window.feature.countryStore,
            labelAlign: 'top',
            fieldLabel: 'Selected Country',
            displayField: 'Name',
            valueField: 'Id',
            labelClsExtra: 'combo-label',
            emptyText: 'Country List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    ResetCountryDependencies();

                    window.feature.regionStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.regionStore.load();

                    window.feature.reportStore.proxy.extraParams.countryId = combo.getValue();
                    window.feature.reportStore.load();
                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        ResetCountryDependencies();
                        window.feature.reportStore.load();
                    }
                }
            }
        });
        window.feature.region = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.regionComboboxId,
            store: window.feature.regionStore,
            labelAlign: 'top',
            fieldLabel: 'Selected Region',
            displayField: 'Name',
            valueField: 'Id',
            labelClsExtra: 'combo-label',
            emptyText: 'Region List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    ResetRegionDependencies();

                    window.feature.districtStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.districtStore.load();

                    window.feature.reportStore.proxy.extraParams.regionId = combo.getValue();
                    window.feature.reportStore.load();
                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        ResetRegionDependencies();
                        window.feature.reportStore.load();
                    }
                }
            }
        });

        window.feature.district = Ext.create('Ext.form.ComboBox', {
            xtype: 'combobox',
            itemId: window.feature.districtComboboxId,
            store: window.feature.districtStore,
            labelAlign: 'top',
            fieldLabel: 'Selected District',
            displayField: 'Name',
            labelClsExtra: 'combo-label',
            valueField: 'Id',
            emptyText: 'District List',
            editable: false,
            typeAhead: false,
            listeners: {
                'select': function (combo, record) {
                    window.feature.reportStore.proxy.extraParams.districtId = combo.getValue();
                    window.feature.reportStore.load();
                },
                specialkey: function (field, e) {
                    if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                        field.setValue(null);
                        window.feature.reportStore.proxy.extraParams.districtId = "";
                        window.feature.reportStore.load();
                    }
                }
            }
        });

        Ext.define('Ext.chart.theme.MyTheme', {
            extend: 'Ext.chart.theme.Base',
            colors: ['rgb(51, 204, 51)', 'rgb(0, 102, 255)', 'rgb(200,0,0)', 'rgb(255, 	153, 	0)'],
            constructor: function (config) {
                this.callParent([Ext.apply({
                    colors: this.colors
                }, config)]);
            }
        });


        function DrawChart() {
            var cont = Ext.getCmp('DivChartContainer');
            var chart = Ext.getCmp('chartIdRemove');
            cont.remove(chart);

            cont.add({
                id: 'chartIdRemove',
                xtype: 'chart',
                animate: true,
                shadow: true,
                style: 'background:#fff',
                minHeight: 300,
                maxHeight: 400,
                flex: 1,
                store: window.feature.reportStore,
                theme: 'MyTheme',
                axes: [{
                    type: 'Category',
                    position: 'left',
                    fields: ['Outpost'],
                    title: 'Health Facility'
                }, {
                    type: 'Numeric',
                    position: 'bottom',
                    fields: ['Treated', 'NotTreated', 'FailedToReport', 'DistinctPatients'],
                    title: 'Number of patients',
                    grid: true,
                    minimum: 0,
                    minorTickSteps: 5,
                    majorTickSteps: GetTheBiggestValue() - 1
                }],
                series: [{
                    type: 'bar',
                    axis: 'bottom',
                    highlight: true,
                    tips: {
                        trackMouse: true,
                        width: 140,
                        height: 28,
                        renderer: function (storeItem, item) {
                            this.setTitle(String(item.value[1]) + ' Patients');
                        }
                    },
                    xField: 'Outpost',
                    yField: ['Treated', 'NotTreated', 'FailedToReport', 'DistinctPatients'],
                    stacked: true
                }],
                legend: {
                    position: 'right'
                }
            });
        };

        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 25 15 15',
            padding: '20 0 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'hbox'
            },
            items: [{
                xtype: 'container',
                flex: 1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                items: [{
                    xtype: 'container',
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    height: 170,
                    items: [
                {
                    xtype: 'container',
                    height: 40,
                    layout: {
                        type: 'column'
                    },
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html: '&nbsp;'
                    }, {
                        xtype: 'label',
                        cls: 'x-title-label',
                        text: 'Summary Report'
                    }]
                }, {
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'column'
                    },
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html: '&nbsp;'
                    }, window.feature.country,
                        window.feature.region,
                        window.feature.district
                    ]
                }, {
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'column'
                    },
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html: '&nbsp;'
                    }, {
                        xtype: 'datefield',
                        fieldLabel: 'Start Date',
                        format: 'd-M-Y',
                        labelAlign: 'top',
                        margin: '5 0 5 0',
                        itemId: window.feature.StartDateId,
                        listeners: {
                            select: function (t, n, o) {
                                var date = t.getValue();
                                window.feature.reportStore.proxy.extraParams.startDate = date;
                                window.feature.exportStartDate = date;
                                window.feature.reportStore.load();
                            },
                            specialkey: function (field, e) {
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue(null);
                                    window.feature.reportStore.proxy.extraParams.startDate = "";
                                    window.feature.exportStartDate = "";
                                    window.feature.reportStore.load();
                                }
                            }
                        }
                    }, {
                        xtype: 'datefield',
                        fieldLabel: 'End Date',
                        labelAlign: 'top',
                        margin: '5 0 5 0',
                        format: 'd-M-Y',
                        itemId: window.feature.EndDateId,
                        listeners: {
                            select: function (t, n, o) {
                                var date = t.getValue();
                                window.feature.reportStore.proxy.extraParams.endDate = date;
                                window.feature.exportEndDate = date;
                                window.feature.reportStore.load();
                            },
                            specialkey: function (field, e) {
                                if (e.getKey() == e.BACKSPACE || e.getKey() == e.DELETE) {
                                    field.setValue(null);
                                    window.feature.reportStore.proxy.extraParams.endDate = "";
                                    window.feature.exportEndDate = "";
                                    window.feature.reportStore.load();
                                }
                            }
                        }
                    }]
                }]
                }, {
                    xtype: 'gridpanel',
                    cls: 'white-border',
                    store: window.feature.reportStore,
                    loadMask: true,
                    disableSelection: true,
                    flex: 3,
                    layout: 'fit',
                    autoScroll: true,
                    columns: [{
                        header: "Health Facility",
                        dataIndex: 'Outpost',
                        flex: 2,
                        minWidth: 160,
                        menuDisabled: true,
                        sortable: true
                    }, {
                        header: "Treated",
                        dataIndex: 'Treated',
                        flex: 1,
                        minWidth: 100,
                        align: 'center',
                        menuDisabled: true,
                        sortable: true
                    }, {
                        header: "Not Treated",
                        dataIndex: 'NotTreated',
                        flex: 1,
                        minWidth: 100,
                        align: 'center',
                        menuDisabled: true,
                        sortable: true
                    }, {
                        header: "Failed To Report",
                        dataIndex: 'FailedToReport',
                        flex: 1,
                        minWidth: 120,
                        align: 'center',
                        menuDisabled: true,
                        sortable: true
                    }, {
                        header: "Distinct Patients",
                        dataIndex: 'DistinctPatients',
                        flex: 1,
                        minWidth: 120,
                        align: 'center',
                        menuDisabled: true,
                        sortable: true
                    }],
                    bbar: [{
                        xtype: 'button',
                        text: 'Export to Excel',
                        handler: function () {
                            DownloadFile();
                        }
                    }]
                }]
            }, {
                xtype: 'container',
                flex: 1,
                layout: {
                    align: 'stretch',
                    type: 'vbox'
                },
                padding: '0 0 0 20',
                items: [{
                    xtype: 'container',
                    id: 'DivChartContainer',
                    flex: 2,
                    layout: {
                        align: 'stretch',
                        type: 'vbox'
                    },
                    autoScroll: true,
                    items: []
                }]
            }]
        });

        function DownloadFile() {
            var body = Ext.getBody();

            var frame = body.createChild({
                tag: 'iframe',
                cls: 'x-hidden',
                id: 'iframe',
                name: 'iframe'
            });

            var form = body.createChild({
                tag: 'form',
                cls: 'x-hidden',
                id: 'form',
                method: 'POST',
                action: '@Url.RouteUrl(AnalysisManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "SummaryReport", action = "ExportToExcel" })',
                target: 'iframe'
            });

            var countryInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'countryId',
                value: window.feature.reportStore.proxy.extraParams.countryId
            });

            var regionInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'regionId',
                value: window.feature.reportStore.proxy.extraParams.regionId
            });

            var districtInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'districtId',
                value: window.feature.reportStore.proxy.extraParams.districtId
            });

            var startDateValue = "";
            if (window.feature.exportStartDate != "")
                startDateValue = Ext.Date.format(window.feature.exportStartDate, 'd-M-Y')

            var startDateInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'startDate',
                value: startDateValue
            });

            var endDateValue = "";
            if (window.feature.exportEndDate != "")
                endDateValue = Ext.Date.format(window.feature.exportEndDate, 'd-M-Y')

            var endDateInput = form.createChild({
                tag: 'input',
                type: 'hidden',
                name: 'endDate',
                value: endDateValue
            });

            form.dom.submit();
        }

        function GetTheBiggestValue() {
            var maxSum = 0;
            window.feature.reportStore.each(function (record) {
                var sum = record.get('Treated') + record.get('NotTreated') + record.get('FailedToReport') + record.get('DistinctPatients');
                if (sum > maxSum)
                    maxSum = sum;
            });
            return maxSum;
        }

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);
        window.feature.reportStore.load();

    });
</script>