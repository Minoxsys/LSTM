@using Web.Areas.ConditionManagement;
@using Web.Areas.ConditionManagement.Controllers;
@using Microsoft.Web.Mvc;

@section page_title{
    Condition Item: Overview
}
@{
    Html.RenderPartial("_SubNavigation");
    Html.RenderPartial("_ServicesAdministrationSideBar");
}
<script type="text/javascript">
    Ext.onReady(function () {

        var administrationBtnId = window.res.header.navigation.administration;
        var administrationBtn = Ext.getCmp(administrationBtnId);
        administrationBtn.toggle(true);

        var conditionSideBarBtnId = window.res.content.maincontent.sidebar.condition;
        var conditionBtn = Ext.getCmp(conditionSideBarBtnId);
        conditionBtn.toggle(true);

        var ConditionAdministrationBtnId = window.res.header.subnavigation.buttonTabs.services;
        var ConditionAdministrationBtn = Ext.getCmp(ConditionAdministrationBtnId);
        ConditionAdministrationBtn.toggle(true);
        ConditionAdministrationBtn.setIcon('@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/Administration/SubMenu/ProductSelected.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))');
    });
</script>
<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};
        window.feature.formConditionCodeId = "Form-Condition-Code-Id";
        window.feature.formConditionKeywordId = "Form-Condition-Keyword-Id";
        window.feature.formConditionDescriptionId = "Form-Condition-Description-Id";
        window.feature.searchCondition = "Search-Condition-Id";

        window.feature.conditionStore = Ext.create('Ext.data.Store', {
            pageSize: 50,
            fields: ['Id', 'Keyword', 'Code', 'Description'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(ConditionManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Condition", action = "GetCondition" })',
                reader: {
                    type: 'json',
                    root: 'Condition',
                    totalProperty: 'TotalItems'
                },
                extraParams: { searchValue: '' },
                simpleSortMode: true
            },
            remoteSort: true,
            sorters: [{
                property: 'Code',
                direction: 'ASC'
            }]
        });

        window.feature.modal = Ext.define('Ext.feature.condition.Modal', {
            extend: 'Ext.window.Window',
            modal: true,
            ui: 'snapshot-popup-window',
            height: 260,
            width: 390,
            layout: {
                align: 'stretch',
                padding: 10,
                type: 'vbox'
            },

            initComponent: function () {
                var me = this;

                Ext.applyIf(me, {
                    items: [{
                        xtype: 'textfield',
                        name: 'Keyword',
                        fieldLabel: 'Keyword',
                        anchor: '100%',
                        itemId: window.feature.formConditionKeywordId
                    }, {
                        xtype: 'textfield',
                        name: 'Code',
                        fieldLabel: 'Code',
                        anchor: '100%',
                        itemId: window.feature.formConditionCodeId
                    }, {
                        xtype: 'textareafield',
                        name: 'Description',
                        fieldLabel: 'Description',
                        autoScroll:true,
                        flex:1,
                        anchor: '100%',
                        itemId: window.feature.formConditionDescriptionId
                    }]
                });

                me.callParent(arguments);
            }
        });

        window.feature.doSearch = new Ext.util.DelayedTask(function () {
            window.feature.conditionStore.loadPage(1);
        });

        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 25 15 15',
            padding:'20 20 0 20',
            autoScroll: true,
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                xtype: 'container',
                layout: {
                    type: 'hbox'
                },
                height: 60,
                items: [{
                    xtype: 'container',
                    flex: 1,
                    height: 70,
                    layout: {
                        type: 'column'
                    },
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html: '&nbsp;'
                    }, {
                        xtype: 'image',
                        src: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/Administration/SubMenu/ProductSelected.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                        margin: '0 10 10 10'
                    }, {
                        xtype: 'label',
                        cls: 'x-title-label',
                        text: 'Symptom'
                    }, {
                        xtype: 'button',
                        margin: '0 0 0 20',
                        ui: 'snapshot-add-btn',
                        cls: 'x-add-button-gradient',
                        disabled: @(ViewBag.HasNoRightsToAdd),
                        text: 'Add New Symptom',
                        handler: function () {
                            var winAdd = new window.feature.modal({
                                title: 'Add New Symptom',
                                buttons: [{
                                    text: 'Cancel',
                                    margin: '10 10 20 0',
                                    ui: 'snapshot-cancel-btn',
                                    cls: 'x-add-button-gradient',
                                    handler: function () { winAdd.close(); winAdd.destroy(); }
                                }, {
                                    text: 'Save',
                                    margin: '0 20 20 10',
                                    ui: 'snapshot-add-btn',
                                    cls: 'x-add-button-gradient',
                                    handler: function () {
                                        var conditionKeyword = winAdd.down('#' + window.feature.formConditionKeywordId);
                                        var conditionCode = winAdd.down('#' + window.feature.formConditionCodeId);
                                        var conditionDescription = winAdd.down('#' + window.feature.formConditionDescriptionId);

                                        if (conditionCode.getValue() == '') {
                                            conditionCode.markInvalid('Field Code is required!');
                                            conditionCode.setValue(null);
                                        } else {
                                            var values = {
                                                Keyword: conditionKeyword.getValue(),
                                                Code: conditionCode.getValue(),
                                                Description: conditionDescription.getValue()
                                            };
                                            var postToUrl = '@Url.RouteUrl(ConditionManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Condition", action = "Create" })';
                                            var action = $.post(postToUrl, values);

                                            action.success(function (serverResponse) {
                                                if (serverResponse.CloseModal == false) {
                                                    var msgAlert = Ext.Msg;
                                                    msgAlert.ui = 'snapshot-popup-window';
                                                    msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                                    msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                                    msgAlert.alert(serverResponse.Status, serverResponse.Message);
                                                } else {
                                                    winAdd.close();
                                                    winAdd.destroy();
                                                    window.feature.conditionStore.loadPage(1);
                                                }
                                            });
                                        }
                                    }
                                }]
                            });
                            winAdd.show();
                        }
                    }]
                }, {
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'hbox',
                        pack: 'end'
                    },
                    height: 80,
                    items: [{
                        xtype: 'textfield',
                        itemId: window.feature.searchCondition,
                        width: 200,
                        frame: true,
                        cls: 'text-field-rounded',
                        emptyText: 'Code Search',
                        enableKeyEvents: true,
                        listeners: {
                            'keyup': {
                                fn: function (key) {
                                    var searchValue = window.feature.container.down('#' + window.feature.searchCondition).getValue();
                                    window.feature.conditionStore.proxy.extraParams.searchValue = searchValue;
                                    window.feature.doSearch.delay(500);
                                }
                            }
                        }
                    }]

                }]
            }, {
                xtype: 'gridpanel',
                cls: 'white-border',
                itemId: window.feature.gridConditionId,
                store: window.feature.conditionStore,
                loadMask: true,
                disableSelection: true,
                flex: 3,
                autoScroll: true,
                columns: [{
                    header: "Keyword",
                    dataIndex: 'Keyword',
                    flex: 1,
                    menuDisabled: true,
                    sortable: true
                }, {
                    text: "Code",
                    dataIndex: 'Code',
                    flex: 1,
                    menuDisabled: true,
                    sortable: true
                }, {
                    text: "Description",
                    dataIndex: 'Description',
                    flex: 1,
                    menuDisabled: true,
                    sortable: true
                }, {
                    xtype: 'actioncolumn',
                    text: 'Actions',
                    flex: 1,
                    menuDisabled: true,
                    items: [{
                        icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/edit.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                        action: 'Edit',
                        handler: function (grid, rowIndex, colIndex) {
                            if(@(ViewBag.HasNoRightsToAdd) === true){
                                           var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                            msgAlert.alert("Alert","You have no rights for this action!");
                            }else{

                            var rec = grid.getStore().getAt(rowIndex);

                            var winEdit = new window.feature.modal({
                                title: 'Edit Symptom',
                                buttons: [{
                                    text: 'Cancel',
                                    margin: '10 10 20 0',
                                    ui: 'snapshot-cancel-btn',
                                    cls: 'x-add-button-gradient',
                                    handler: function () { winEdit.close(); winEdit.destroy(); }
                                }, {
                                    text: 'Save',
                                    margin: '0 20 20 10',
                                    ui: 'snapshot-add-btn',
                                    cls: 'x-add-button-gradient',
                                    handler: function () {

                                        var conditionKeyword = winEdit.down('#' + window.feature.formConditionKeywordId);
                                        var conditionCode = winEdit.down('#' + window.feature.formConditionCodeId);
                                        var conditionDescription = winEdit.down('#' + window.feature.formConditionDescriptionId);

                                        if (conditionCode.getValue() == '') {
                                            conditionCode.markInvalid('Field Code is required!');
                                            conditionCode.setValue(null);
                                        } else {
                                            var values = {
                                                Id: rec.get('Id'),
                                                Keyword: conditionKeyword.getValue(),
                                                Code: conditionCode.getValue(),
                                                Description: conditionDescription.getValue()
                                            };
                                            var postToUrl = '@Url.RouteUrl(ConditionManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Condition", action = "Edit" })';
                                            var action = $.post(postToUrl, values);
                                            action.success(function (serverResponse) {
                                                if (serverResponse.CloseModal == false) {
                                                    var msgAlert = Ext.Msg;
                                                    msgAlert.ui = 'snapshot-popup-window';
                                                    msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                                    msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                                    msgAlert.alert(serverResponse.Status, serverResponse.Message);
                                                }
                                                else {

                                                    winEdit.close();
                                                    winEdit.destroy();
                                                    window.feature.conditionStore.loadPage(1);
                                                }
                                            });
                                        }
                                    }

                                }]
                            });

                            winEdit.down('#' + window.feature.formConditionCodeId).setValue(rec.get('Code'));
                            winEdit.down('#' + window.feature.formConditionKeywordId).setValue(rec.get('Keyword'));
                            winEdit.down('#' + window.feature.formConditionDescriptionId).setValue(rec.get('Description'));

                            winEdit.show();
                            }
                        }
                    }, {
                        icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/delete.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                        action: 'Delete',
                        handler: function (grid, rowIndex, colIndex) {
                            if(@(ViewBag.HasNoRightsToDelete) === true){
                                           var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                            msgAlert.alert("Alert","You have no rights for this action!");
                            }else{
                                var rec = grid.getStore().getAt(rowIndex);

                                var msgConfirm = Ext.Msg;
                                msgConfirm.ui = 'snapshot-popup-window';
                                msgConfirm.msgButtons['no'].ui = 'snapshot-cancel-btn';
                                msgConfirm.msgButtons['no'].margin = '10 10 20 0';
                                msgConfirm.msgButtons['yes'].ui = 'snapshot-add-btn';
                                msgConfirm.msgButtons['ok'].ui = 'snapshot-add-btn';
                                msgConfirm.msgButtons['ok'].margin = '10 10 20 0';
                                msgConfirm.confirm('Warning', Ext.String.format('Are you sure you want to delete symptom {0} ?', rec.get('Code')), function (btn) {
                                    if (btn == 'yes') {
                                        var values = { id: rec.get('Id') };
                                        var postToUrl = '@Url.RouteUrl(ConditionManagementAreaRegistration.DEFAULT_ROUTE, new { controller = "Condition", action = "Delete" })';
                                        var action = $.post(postToUrl, values);

                                        action.success(function (serverResponse) {
                                            if (serverResponse.Status == "Error") {
                                                var msgAlert = Ext.Msg;
                                                msgAlert.ui = 'snapshot-popup-window';
                                                msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                                msgAlert.msgButtons['ok'].margin = '10 10 20 0',
                                                msgAlert.alert(serverResponse.Status, serverResponse.Message);
                                            }
                                            window.feature.conditionStore.loadPage(1);
                                        });
                                    }

                                });
                            }
                        }
                    }]
                }],
                bbar: Ext.create('Ext.PagingToolbar', {
                    store: window.feature.conditionStore,
                    displayInfo: true,
                    displayMsg: 'Displaying topics {0} - {1} of {2}',
                    emptyMsg: "No topics to display",
                    ui: 'snapshot-pagination-toolbar'
                })
            }]
        });

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);
        window.feature.conditionStore.loadPage(1);
    });

</script>