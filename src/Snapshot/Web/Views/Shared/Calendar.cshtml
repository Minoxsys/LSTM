@model Web.Models.Shared.EventsCalendarModel
          
@{
    DateTime now = DateTime.Now;
    
    // Get the year,
    int year = Model.Year;
    int month = Model.Month;

    // Get the first day of the month
    var firstDayOfMonth = new DateTime(year, month, 1);

    var previousMonth = firstDayOfMonth.AddDays(-1);
    var daysInPreviousMonth = DateTime.DaysInMonth(previousMonth.Year, previousMonth.Month);

    var numberOfDaysInMonth = DateTime.DaysInMonth(year, month);

    // This is midnight morning of the first day of next month: 4/1/2010 12:00:00 AM
    var lastDayOfMonth = firstDayOfMonth.AddDays(numberOfDaysInMonth);

    var dayOfWeek = firstDayOfMonth.DayOfWeek;

    // Number of blank cells we need
    var numBlankCells =  (int)dayOfWeek;

    // We use this to know when to make a new row (%7)
    var dayCounter = 1;

    // What day of the month are we on.
    var dayNumber = 1;

    var dayGroups =
        (from dynamic e in (IEnumerable<object>)Model.Events
         group e by e.Date into g
        orderby g.Key
        select new { 
            Date = g.Key, 
            Events = g.OrderByDescending(e => e.Date)
        }).ToDictionary(g => g.Date.Date);

}

<table class="calendar">

    <thead>
        <tr>
            <th scope="col">Sun</th>
            <th scope="col">Mon</th>
            <th scope="col">Tue</th>
            <th scope="col">Wed</th>
            <th scope="col">Thu</th>
            <th scope="col">Fri</th>
            <th scope="col">Sat</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            @* Print out all of the blanks so we start on the right day*@
            @{
                var displayedDate = previousMonth;
            }
            @for (int i = numBlankCells-1; i >= 0; i--) {
               
                displayedDate = previousMonth.AddDays(daysInPreviousMonth-i).AddMonths(-1);
                 
                <td class="inactive">
                    <span class="day-number" title="@displayedDate.ToShortDateString()">
                        @(daysInPreviousMonth-i)
                    </span>
                </td>
                dayCounter++;
            }

            @* Go through every day in this month *@
            @while (dayNumber <= numberOfDaysInMonth) {
                
                var className = new System.Text.StringBuilder();
                                
                var currentDisplayDate = new DateTime(year,month,dayNumber);
                
                bool isWeekend = (currentDisplayDate.DayOfWeek == DayOfWeek.Sunday || currentDisplayDate.DayOfWeek == DayOfWeek.Saturday);
                
                if (now.Date == currentDisplayDate) {
                    className.Append("today ");    
                }

                if (dayGroups.ContainsKey(currentDisplayDate))
                {
                    className.Append("has-events ");
                }
                
                if(isWeekend)
                {
                    className.Append("weekend ");
                }		
                
                displayedDate = firstDayOfMonth.AddDays(dayNumber-1);		

                
                <td class="@className">
                    <span class="day-number" title="@displayedDate.ToShortDateString()">@dayNumber</span>                
                </td>
                dayCounter++;
                dayNumber++;
                @* If we are at the end of the week, go to the next row *@
                if (dayCounter % 8 == 0 && dayNumber -1 != numberOfDaysInMonth) {
                    @:</tr><tr>
                    dayCounter++;
                }
            }
            @* Finish this week display *@
            @{
                dayNumber = 1;
                while (dayCounter % 8 > 1 && dayCounter %8 <= 7) {
                    displayedDate = firstDayOfMonth.AddMonths(1).AddDays(dayNumber-1);
                    <td class="inactive">
                       <span class="day-number" title="@displayedDate.ToShortDateString()">@dayNumber</span>
                    </td>
                    dayNumber++;
                    dayCounter++;
                }
            }
        </tr>
    </tbody>
</table>

