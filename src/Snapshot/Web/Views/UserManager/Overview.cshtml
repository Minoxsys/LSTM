@using Domain
@using Microsoft.Web.Mvc;

@section page_title{
User Administration Users: Overview
}

@{
    Html.RenderPartial("_SubNavigation");
    Html.RenderPartial("_UserAdministrationSideBar");
}

<script type="text/javascript">
    Ext.onReady(function () {
        var administrationBtnId = window.res.header.navigation.administration;
        var administrationBtn = Ext.getCmp(administrationBtnId);
        administrationBtn.toggle(true);

        var userAdministrationBtnId = window.res.header.subnavigation.buttonTabs.user;
        var userAdministrationBtn = Ext.getCmp(userAdministrationBtnId);
        userAdministrationBtn.toggle(true);
        userAdministrationBtn.setIcon('@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/Administration/SubMenu/UserSelected.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))');

        var usersGroupBtnId = window.res.content.maincontent.sidebar.users;
        var usersGroupBtn = Ext.getCmp(usersGroupBtnId);
        usersGroupBtn.toggle(true);
    });
</script>

<script type="text/javascript">
    Ext.onReady(function () {
        window.feature = {};
        window.feature.formUserFirstNameId = 'Form-User-First-Name';
        window.feature.formUserLastNameId = 'Form-User-Last-Name';
        window.feature.formUserEmailId = 'Form-User-Email';
        window.feature.formUserUsernameId = 'Form-User-Username';
        window.feature.formUserPasswordId = 'Form-User-Password';
        window.feature.formUserRoleId = 'Form-User-Role-ComboBox-Id';
        window.feature.formUserClientId = 'Form-User-Client-ComboBox-Id';
        window.feature.searchUserName = 'Search-Username-Id';

        window.feature.UsersStore = Ext.create('Ext.data.Store', {
            pageSize: 50,
            remoteSuport: true,
            fields: ['Id', 'FirstName', 'LastName', 'UserName', 'Password', 'Email', 'ClientName', 'RoleName', 'RoleId', 'ClientId'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Bootstrap.Routes.DefaultRouteRegistrar.DEFAULT_ROUTE, new { controller = "UserManager", action = "GetListOfUsers" })',
                reader: {
                    type: 'json',
                    root: 'Users',
                    totalProperty: 'TotalItems'
                },
                extraParams: { searchValue: '' },
                simpleSortMode: true
            },
            remoteSort: true,
            sorters: [{
                property: 'UserName',
                direction: 'ASC'
            }]
        });

        window.feature.clientsStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            fields: ['Id','Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Bootstrap.Routes.DefaultRouteRegistrar.DEFAULT_ROUTE, new { controller = "UserManager", action = "GetListOfClients" })',
                reader: {
                    type: 'json',
                    root: 'Clients',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.rolesStore = Ext.create('Ext.data.Store', {
            remoteSuport: true,
            fields: ['Id','Name'],
            proxy: {
                type: 'ajax',
                url: '@Url.RouteUrl(Web.Bootstrap.Routes.DefaultRouteRegistrar.DEFAULT_ROUTE, new { controller = "UserManager", action = "GetListOfRoles" })',
                reader: {
                    type: 'json',
                    root: 'Roles',
                    totalProperty: 'TotalItems'
                },
                simpleSortMode: true
            },
            sorters: [{
                property: 'Name',
                direction: 'ASC'
            }]
        });

        window.feature.modal = Ext.define('Ext.feature.region.Modal', {
            extend: 'Ext.window.Window',
            modal:true,
            ui: 'snapshot-popup-window',
            height: 340,
            width: 390,
            layout: {
                align: 'stretch',
                padding: 10,
                type: 'vbox'
            },

            initComponent: function () {
                var me = this;
                Ext.applyIf(me, {
                    items: [{
                        xtype: 'textfield',
                        name: 'FirstName',
                        fieldLabel: 'First Name',
                        anchor: '100%',
                        itemId: window.feature.formUserFirstNameId
                    },{
                        xtype: 'textfield',
                        name: 'LastName',
                        fieldLabel: 'Last Name',
                        anchor: '100%',
                        itemId: window.feature.formUserLastNameId
                    },{
                        xtype: 'textfield',
                        name: 'Email',
                        fieldLabel: 'Email',
                        anchor: '100%',
                        itemId: window.feature.formUserEmailId
                    },{
                        xtype: 'textfield',
                        name: 'UserName',
                        fieldLabel: 'Username',
                        anchor: '100%',
                        itemId: window.feature.formUserUsernameId
                    },{
                        xtype: 'textfield',
                        name: 'Password',
                        fieldLabel: 'Password',
                        anchor: '100%',
                        itemId: window.feature.formUserPasswordId
                    },{
                        xtype: 'combobox',
                        itemId: window.feature.formUserRoleId,
                        store: window.feature.rolesStore,
                        fieldLabel: 'Role',
                        displayField: 'Name',
                        valueField:'Id',
                        emptyText: 'Select Role', 
                        editable: false,
                        typeAhead: false
                    },{
                        xtype: 'combobox',
                        itemId: window.feature.formUserClientId,
                        store: window.feature.clientsStore,
                        fieldLabel: 'Client',
                        displayField: 'Name',
                        valueField:'Id',
                        emptyText: 'Select Client', 
                        editable: false,
                        typeAhead: false
                    }]
                });

                 me.callParent(arguments);
            }
        });

         window.feature.doSearch = new Ext.util.DelayedTask(function(){
			                        window.feature.UsersStore.loadPage(1);
                                });

        window.feature.container = Ext.create('Ext.container.Container', {
            margin: '15 25 15 15',
            padding:'20 20 0 20',
            id: 'TopContainer',
            layout: {
                align: 'stretch',
                type: 'vbox'
            },
            items: [{
                xtype: 'container',
                layout: {
                    type: 'hbox'
                },
                height: 50,
                items:[{
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'column'
                    },
                    height:50,
                    items: [{
                        xtype: 'container',
                        height: 30,
                        width: 30,
                        html:'&nbsp;'
                    },{xtype: 'image',
                       src: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/Administration/Content/Users.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',
                       margin: '0 10 10 10'
                      },{
                        xtype: 'label',
                        cls: 'x-title-label',
                        text: 'User Administration'
                    },{
                        xtype: 'button',
                        margin: '0 0 0 20',
                        text: 'Add New User',
                        disabled: @(ViewBag.HasNoRightsToAdd),
                        ui: 'snapshot-add-btn',
                        cls: 'x-add-button-gradient',
                        handler: function(){
                            var winAdd = new window.feature.modal({
                                title: 'Add New User',
                                buttons: [
                                    { text: 'Cancel',
                                      margin: '10 10 20 0',
                                      ui: 'snapshot-cancel-btn',
                                      cls: 'x-add-button-gradient',
                                      handler:function(){ winAdd.close(); winAdd.destroy();} },
                                    { text: 'Save',
                                        margin: '0 20 20 10',
                                        ui: 'snapshot-add-btn',
                                        cls: 'x-add-button-gradient',
                                        handler:function(){
                                        var userFirstName = winAdd.down('#'+window.feature.formUserFirstNameId);
                                        var userLastName = winAdd.down('#'+window.feature.formUserLastNameId);
                                        var userUserName = winAdd.down('#'+window.feature.formUserUsernameId);
                                        var userEmail = winAdd.down('#'+window.feature.formUserEmailId);
                                        var userPassword = winAdd.down('#'+window.feature.formUserPasswordId);
                                        var userRole = winAdd.down('#'+window.feature.formUserRoleId);
                                        var userClient = winAdd.down('#'+window.feature.formUserClientId);
                                        var ok = IsValid(userUserName, userEmail, userRole, userClient, userFirstName, userLastName);

                                        if (ok == true){
                                            var values = {
                                                FirstName:  userFirstName.getValue(),
                                                LastName:  userLastName.getValue(),
                                                UserName: userUserName.getValue(),
                                                Email: userEmail.getValue(),
                                                Password: userPassword.getValue(),
                                                RoleId: userRole.getValue(),
                                                ClientId: userClient.getValue(),
                                                ClientName: userClient.getRawValue(),
                                                RoleName: userRole.getRawValue()
                                            };

                                            var postToUrl = '@Url.RouteUrl(Web.Bootstrap.Routes.DefaultRouteRegistrar.DEFAULT_ROUTE, new { controller = "UserManager", action = "Create" })';
                                            var action = $.post(postToUrl, values);
                                            action.success(function(serverResponse){
                                                
                                                winAdd.close();
                                                winAdd.destroy();
                                                window.feature.UsersStore.loadPage(1); 
                                            });
                                        }
                                    }}
                                ]
                            });
                            winAdd.show();
                        }
                    }]
                },{
                    xtype: 'container',
                    flex: 1,
                    layout: {
                        type: 'hbox',
                        pack:'end'
                    },
                    height:50,
                    items: [{
                        xtype: 'textfield',
                        itemId: window.feature.searchUserName,
                        width: 200,
                        frame: true,
                        emptyText: 'User Search',
                        enableKeyEvents: true,
                        listeners: {
                         'specialkey': function (field, e) {
                                if (e.getKey() == Ext.EventObject.ESC) {
                                    window.feature.container.down('#'+window.feature.searchUserName).setValue('');
                                    window.feature.UsersStore.proxy.extraParams.searchValue = '';
                                    window.feature.doSearch.delay(500);
                                    }
                            },
                            'keyup': {
                                fn: function(key) {
                                    var searchValue = window.feature.container.down('#'+window.feature.searchUserName).getValue();
                                    window.feature.UsersStore.proxy.extraParams.searchValue = searchValue;
                                    window.feature.doSearch.delay(500);
                                    
                                }
                            }
                        }
                    }]
                }]
            },{
                xtype: 'gridpanel',
                cls: 'white-border',
                store: window.feature.UsersStore,
                loadMask: true,
                disableSelection: true,
                flex:3,
                autoScroll:true,
                columns: [{
                    header: 'First Name',
                    dataIndex: 'FirstName',
                    flex: 1,
                    menuDisabled:true,
                    sortable: true
                },{
                    header: 'Last Name',
                    dataIndex: 'LastName',
                    menuDisabled:true,
                    flex: 1,
                    sortable: true
                },{
                    header: 'Username',
                    dataIndex: 'UserName',
                    menuDisabled:true,
                    flex: 1,
                    sortable: true
                },{
                    header: 'Email',
                    dataIndex: 'Email',
                    menuDisabled:true,
                    flex: 1,
                    sortable: true
                },{
                    header: 'Role',
                    dataIndex: 'RoleName',
                    menuDisabled:true,
                    flex: 1,
                    sortable: true
                },{
                    header: 'Client',
                    dataIndex: 'ClientName',
                    menuDisabled:true,
                    flex: 1,
                    sortable: true
                },{
                    xtype: 'actioncolumn',
			        text: 'Actions',
                    menuDisabled:true,
                    flex: 1.7,
                    items: [{
                        icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/edit.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))', 
                        handler: function(grid, rowIndex, colIndex) {
                         if(@(ViewBag.HasNoRightsToAdd) === true){
                                           var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                            msgAlert.alert("Alert","You have no rights for this action!");
                            }else{
                            var rec = grid.getStore().getAt(rowIndex);

                            var winEdit = new window.feature.modal({
                                title: Ext.String.format('Edit User {0}', rec.get('UserName')),
                                buttons: [
                                { text: 'Cancel',
                                  margin: '0 20 20 10',
                                  ui: 'snapshot-cancel-btn',
                                  cls: 'x-add-button-gradient',
                                 handler:function(){ winEdit.close(); winEdit.destroy();} },
                                { text: 'Save',
                                  margin: '0 20 20 10',
                                  ui: 'snapshot-add-btn',
                                  cls: 'x-add-button-gradient',
                                  handler:function(){
                                    var userFirstName = winEdit.down('#'+window.feature.formUserFirstNameId);
                                    var userLastName = winEdit.down('#'+window.feature.formUserLastNameId);
                                    var userUserName = winEdit.down('#'+window.feature.formUserUsernameId);
                                    var userEmail = winEdit.down('#'+window.feature.formUserEmailId);
                                    var userPassword = winEdit.down('#'+window.feature.formUserPasswordId);
                                    var userRole = winEdit.down('#'+window.feature.formUserRoleId);
                                    var userClient = winEdit.down('#'+window.feature.formUserClientId);
                                    var ok = IsValid(userUserName, userEmail, userRole, userClient, userFirstName, userLastName);

                                    if (ok == true){
                                        var values = {
                                            Id: rec.get('Id'),
                                            FirstName:  userFirstName.getValue(),
                                            LastName:  userLastName.getValue(),
                                            UserName: userUserName.getValue(),
                                            Email: userEmail.getValue(),
                                            Password: userPassword.getValue(),
                                            RoleId: userRole.getValue(),
                                            ClientId: userClient.getValue(),
                                            ClientName: userClient.getRawValue(),
                                            RoleName: userRole.getRawValue()
                                        };

                                        var postToUrl = '@Url.RouteUrl(Web.Bootstrap.Routes.DefaultRouteRegistrar.DEFAULT_ROUTE, new { controller = "UserManager", action = "Edit" })';
                                        var action = $.post(postToUrl, values);
                                        action.success(function(serverResponse){
                                            if(serverResponse.Status === "Error"){
                                             var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                            msgAlert.alert(serverResponse.Status, serverResponse.Message);}else{
                                            winEdit.close();
                                            winEdit.destroy();
                                            window.feature.UsersStore.loadPage(1); }
                                        });
                                    }
                                }}
                                ]
                            });
                            window.feature.clientsStore.load();
                            window.feature.rolesStore.load();

                            winEdit.down('#'+window.feature.formUserFirstNameId).setValue(rec.get('FirstName'));
                            winEdit.down('#'+window.feature.formUserLastNameId).setValue(rec.get('LastName'));
                            winEdit.down('#'+window.feature.formUserUsernameId).setValue(rec.get('UserName'));
                            winEdit.down('#'+window.feature.formUserEmailId).setValue(rec.get('Email'));
                            winEdit.down('#'+window.feature.formUserRoleId).setValue(rec.get('RoleId'));
                            winEdit.down('#'+window.feature.formUserClientId).setValue(rec.get('ClientId'));

                            winEdit.show();
                            }
                        }
                    },{
                        icon: '@(Url.RouteUrl<Web.Controllers.AssetsController>(it => it.Shared("/img/delete.png"), Web.Bootstrap.Routes.AssetRoutesRegistrar.SHARED))',  
                        handler: function(grid, rowIndex, colIndex) {
                         if(@(ViewBag.HasNoRightsToDelete) === true){
                                           var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                            msgAlert.alert("Alert","You have no rights for this action!");
                            }else{
                            var rec = grid.getStore().getAt(rowIndex);
                            var msgConfirm = Ext.Msg;
                            msgConfirm.ui = 'snapshot-popup-window';
                            msgConfirm.msgButtons['no'].ui = 'snapshot-cancel-btn';
                            msgConfirm.msgButtons['no'].margin = '10 10 20 0';
                            msgConfirm.msgButtons['yes'].ui = 'snapshot-add-btn';
                            msgConfirm.msgButtons['ok'].ui = 'snapshot-add-btn';
                            msgConfirm.msgButtons['ok'].margin = '10 10 20 0';
                            msgConfirm.confirm('Warning', Ext.String.format('Are you sure you want to delete {0} ?', rec.get('UserName')), function(btn)
                            {
                                if (btn=='yes'){
                                    var values = { userId: rec.get('Id') };
                                    var postToUrl = '@Url.RouteUrl(Web.Bootstrap.Routes.DefaultRouteRegistrar.DEFAULT_ROUTE, new { controller = "UserManager", action = "Delete" })';
                                    var action = $.post(postToUrl, values);

                                    action.success(function(serverResponse){
                                    if(serverResponse.Status === "Error"){
                                     var msgAlert = Ext.Msg;
                                            msgAlert.ui = 'snapshot-popup-window';
                                            msgAlert.msgButtons['ok'].ui = 'snapshot-add-btn';
                                            msgAlert.msgButtons['ok'].margin = '10 10 20 0';
                                        msgAlert.alert(serverResponse.Status, serverResponse.Message);}
                                        window.feature.UsersStore.loadPage(1);
                                    });
                                }

                            });
                            }
					    }  
                    }]
                }],
                bbar: Ext.create('Ext.PagingToolbar', {
                    store: window.feature.UsersStore,
                    displayInfo: true,
                    displayMsg: 'Displaying topics {0} - {1} of {2}',
                    emptyMsg: "No topics to display",
                    ui: 'snapshot-pagination-toolbar'
                })
            }]
        });

        function IsValid(username, email, role, client, firstname, lastname){
            var ok = true;
            if (username.getValue() == ''){
                username.markInvalid('Field Username is required!');  
                username.setValue(null);
                ok = false;
            }

            if (email.getValue() == ''){
                email.markInvalid('Field Email is required!');  
                email.setValue(null);
                ok = false;
            }

            if (role.getValue() == null){
                role.markInvalid('Field Role is required!');  
                role.setValue(null);
                ok = false;
            }

            if (client.getValue() == null){
                client.markInvalid('Field Client is required!');  
                client.setValue(null);
                ok = false;
            }

            if (firstname.getValue() == ''){
                firstname.markInvalid('Field First Name is required!');  
                firstname.setValue(null);
                ok = false;
            }

            if (lastname.getValue() == ''){
                lastname.markInvalid('Field Last Name is required!');  
                lastname.setValue(null);
                ok = false;
            }

            return ok;
        }

        var contentRes = window.res.content;
        var mainContent = Ext.getCmp(contentRes.maincontent.id);

        mainContent.add(window.feature.container);
        window.feature.UsersStore.loadPage(1);

    });

</script>